// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetesingressnginx.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ControllerMetricsServiceMonitorArgs extends com.pulumi.resources.ResourceArgs {

    public static final ControllerMetricsServiceMonitorArgs Empty = new ControllerMetricsServiceMonitorArgs();

    @Import(name="additionalLabels")
    private @Nullable Output<Map<String,String>> additionalLabels;

    public Optional<Output<Map<String,String>>> additionalLabels() {
        return Optional.ofNullable(this.additionalLabels);
    }

    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    @Import(name="honorLabels")
    private @Nullable Output<Boolean> honorLabels;

    public Optional<Output<Boolean>> honorLabels() {
        return Optional.ofNullable(this.honorLabels);
    }

    /**
     * The label to use to retrieve the job name from.
     * 
     */
    @Import(name="jobLabel")
    private @Nullable Output<String> jobLabel;

    /**
     * @return The label to use to retrieve the job name from.
     * 
     */
    public Optional<Output<String>> jobLabel() {
        return Optional.ofNullable(this.jobLabel);
    }

    @Import(name="metricRelabelings")
    private @Nullable Output<List<String>> metricRelabelings;

    public Optional<Output<List<String>>> metricRelabelings() {
        return Optional.ofNullable(this.metricRelabelings);
    }

    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    @Import(name="namespaceSelector")
    private @Nullable Output<Map<String,Map<String,String>>> namespaceSelector;

    public Optional<Output<Map<String,Map<String,String>>>> namespaceSelector() {
        return Optional.ofNullable(this.namespaceSelector);
    }

    @Import(name="scrapeInterval")
    private @Nullable Output<String> scrapeInterval;

    public Optional<Output<String>> scrapeInterval() {
        return Optional.ofNullable(this.scrapeInterval);
    }

    @Import(name="targetLabels")
    private @Nullable Output<List<String>> targetLabels;

    public Optional<Output<List<String>>> targetLabels() {
        return Optional.ofNullable(this.targetLabels);
    }

    private ControllerMetricsServiceMonitorArgs() {}

    private ControllerMetricsServiceMonitorArgs(ControllerMetricsServiceMonitorArgs $) {
        this.additionalLabels = $.additionalLabels;
        this.enabled = $.enabled;
        this.honorLabels = $.honorLabels;
        this.jobLabel = $.jobLabel;
        this.metricRelabelings = $.metricRelabelings;
        this.namespace = $.namespace;
        this.namespaceSelector = $.namespaceSelector;
        this.scrapeInterval = $.scrapeInterval;
        this.targetLabels = $.targetLabels;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ControllerMetricsServiceMonitorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ControllerMetricsServiceMonitorArgs $;

        public Builder() {
            $ = new ControllerMetricsServiceMonitorArgs();
        }

        public Builder(ControllerMetricsServiceMonitorArgs defaults) {
            $ = new ControllerMetricsServiceMonitorArgs(Objects.requireNonNull(defaults));
        }

        public Builder additionalLabels(@Nullable Output<Map<String,String>> additionalLabels) {
            $.additionalLabels = additionalLabels;
            return this;
        }

        public Builder additionalLabels(Map<String,String> additionalLabels) {
            return additionalLabels(Output.of(additionalLabels));
        }

        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder honorLabels(@Nullable Output<Boolean> honorLabels) {
            $.honorLabels = honorLabels;
            return this;
        }

        public Builder honorLabels(Boolean honorLabels) {
            return honorLabels(Output.of(honorLabels));
        }

        /**
         * @param jobLabel The label to use to retrieve the job name from.
         * 
         * @return builder
         * 
         */
        public Builder jobLabel(@Nullable Output<String> jobLabel) {
            $.jobLabel = jobLabel;
            return this;
        }

        /**
         * @param jobLabel The label to use to retrieve the job name from.
         * 
         * @return builder
         * 
         */
        public Builder jobLabel(String jobLabel) {
            return jobLabel(Output.of(jobLabel));
        }

        public Builder metricRelabelings(@Nullable Output<List<String>> metricRelabelings) {
            $.metricRelabelings = metricRelabelings;
            return this;
        }

        public Builder metricRelabelings(List<String> metricRelabelings) {
            return metricRelabelings(Output.of(metricRelabelings));
        }

        public Builder metricRelabelings(String... metricRelabelings) {
            return metricRelabelings(List.of(metricRelabelings));
        }

        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        public Builder namespaceSelector(@Nullable Output<Map<String,Map<String,String>>> namespaceSelector) {
            $.namespaceSelector = namespaceSelector;
            return this;
        }

        public Builder namespaceSelector(Map<String,Map<String,String>> namespaceSelector) {
            return namespaceSelector(Output.of(namespaceSelector));
        }

        public Builder scrapeInterval(@Nullable Output<String> scrapeInterval) {
            $.scrapeInterval = scrapeInterval;
            return this;
        }

        public Builder scrapeInterval(String scrapeInterval) {
            return scrapeInterval(Output.of(scrapeInterval));
        }

        public Builder targetLabels(@Nullable Output<List<String>> targetLabels) {
            $.targetLabels = targetLabels;
            return this;
        }

        public Builder targetLabels(List<String> targetLabels) {
            return targetLabels(Output.of(targetLabels));
        }

        public Builder targetLabels(String... targetLabels) {
            return targetLabels(List.of(targetLabels));
        }

        public ControllerMetricsServiceMonitorArgs build() {
            return $;
        }
    }

}
