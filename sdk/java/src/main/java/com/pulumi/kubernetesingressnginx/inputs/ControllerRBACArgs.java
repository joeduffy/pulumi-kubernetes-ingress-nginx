// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetesingressnginx.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ControllerRBACArgs extends com.pulumi.resources.ResourceArgs {

    public static final ControllerRBACArgs Empty = new ControllerRBACArgs();

    @Import(name="create")
    private @Nullable Output<Boolean> create;

    public Optional<Output<Boolean>> create() {
        return Optional.ofNullable(this.create);
    }

    @Import(name="scope")
    private @Nullable Output<Boolean> scope;

    public Optional<Output<Boolean>> scope() {
        return Optional.ofNullable(this.scope);
    }

    private ControllerRBACArgs() {}

    private ControllerRBACArgs(ControllerRBACArgs $) {
        this.create = $.create;
        this.scope = $.scope;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ControllerRBACArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ControllerRBACArgs $;

        public Builder() {
            $ = new ControllerRBACArgs();
        }

        public Builder(ControllerRBACArgs defaults) {
            $ = new ControllerRBACArgs(Objects.requireNonNull(defaults));
        }

        public Builder create(@Nullable Output<Boolean> create) {
            $.create = create;
            return this;
        }

        public Builder create(Boolean create) {
            return create(Output.of(create));
        }

        public Builder scope(@Nullable Output<Boolean> scope) {
            $.scope = scope;
            return this;
        }

        public Builder scope(Boolean scope) {
            return scope(Output.of(scope));
        }

        public ControllerRBACArgs build() {
            return $;
        }
    }

}
